package ministub

import (
	"testing"

	"github.com/stretchr/testify/require"
)

func TestParseAndStub(t *testing.T) {
	src := `package test

	type Tester interface {
		Foo() error
		Bar(m map[string]string, qux bool)
		Buz(b bool, s ...string) (bool, error)
		Abc(t *testing.T) error
	}
`
	bs, err := ParseAndStub("Tester", "", src, true)
	require.NoError(t, err)

	expected := `// Code generated by ministub; DO NOT EDIT.
package test

// FakeTester implements Tester.
type FakeTester struct {
	FooStub func() error
	BarStub func(m map[string]string, qux bool)
	BuzStub func(b bool, s ...string) (bool, error)
	AbcStub func(t *testing.T) error
}

func (f *FakeTester) Foo() error {
	return f.FooStub()
}
func (f *FakeTester) Bar(m map[string]string, qux bool) {
	return f.BarStub(m, qux)
}
func (f *FakeTester) Buz(b bool, s ...string) (bool, error) {
	return f.BuzStub(b, s)
}
func (f *FakeTester) Abc(t *testing.T) error {
	return f.AbcStub(t)
}
`
	require.Equal(t, expected, string(bs))
}

func TestParseAndStubEmptyInterface(t *testing.T) {
	src := `package test

	type Tester interface {
	}
`
	bs, err := ParseAndStub("Tester", "", src, true)
	require.NoError(t, err)

	expected := `// Code generated by ministub; DO NOT EDIT.
package test

// FakeTester implements Tester.
type FakeTester struct {
}
`
	require.Equal(t, expected, string(bs))
}
